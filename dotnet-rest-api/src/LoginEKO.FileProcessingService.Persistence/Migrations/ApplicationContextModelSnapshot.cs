// <auto-generated />
using System;
using LoginEKO.FileProcessingService.Domain.Models.Enums;
using LoginEKO.FileProcessingService.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoginEKO.FileProcessingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "crop_type", new[] { "maize", "sunflowers" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cruise_pilot_status_type", new[] { "status_0" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "parking_break_status_type", new[] { "status_3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transverse_differential_lock_status_type", new[] { "status_0" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "wheel_drive_status_type", new[] { "inactive", "active", "status_2" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.CombineTelemetry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AutoPilotStatus")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("auto_pilot_status");

                    b.Property<double>("ChannelPositionInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("channel_position_in_percentage");

                    b.Property<bool>("Chopper")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("chopper");

                    b.Property<short>("ConcavePositionInMM")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("concave_position_in_mm");

                    b.Property<CruisePilotStatus>("CruisePilotStatus")
                        .HasColumnType("cruise_pilot_status_type")
                        .HasColumnName("cruise_pilot_status");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date");

                    b.Property<double>("DieselTankLevelInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("diesel_tank_level_in_percentage");

                    b.Property<int>("DrumSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("drum_speed_in_rpm");

                    b.Property<double>("EngineLoadInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("engine_load_in_percentage");

                    b.Property<int>("EngineSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("engine_speed_in_rpm");

                    b.Property<int>("FanSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("fan_speed_in_rpm");

                    b.Property<int>("FeedRakeSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("feed_rake_speed_in_rpm");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("UUID")
                        .HasColumnName("file_metadata_id");

                    b.Property<bool>("FrontAttachment")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("front_attachment");

                    b.Property<double>("GPSLatitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_latitude");

                    b.Property<double>("GPSLongitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_longitude");

                    b.Property<double>("GrainInReturnsInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("grain_in_returns_in_percentage");

                    b.Property<double?>("GrainMoistureContentInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("grain_moisture_content_in_percentage");

                    b.Property<bool>("GrainTank100")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("grain_tank_100");

                    b.Property<bool>("GrainTank70")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("grain_tank_70");

                    b.Property<bool>("GrainTankUnloading")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("grain_tank_unloading");

                    b.Property<double>("GroundSpeedInKmh")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("ground_speed_in_kmh");

                    b.Property<short>("LowerSievePositionInMM")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("lower_sieve_position_in_mm");

                    b.Property<bool>("MainDriveStatus")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("main_drive_status");

                    b.Property<short>("MaxNumberOfPartialWidths")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("Max_number_of_partial_widths");

                    b.Property<bool>("MoistureMeasurement")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("moisture_measurement");

                    b.Property<short>("NumberOfPartialWidths")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("number_of_partial_widths");

                    b.Property<double>("QuantimeterCalibrationFactor")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("quantimeter_calibration_factor");

                    b.Property<int?>("RadialSpreaderSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("radial_spreader_speed_in_rpm");

                    b.Property<double>("RateOfWorkInHaPerHour")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("rate_of_work_in_ha_per_hour");

                    b.Property<double>("ReturnsAugerMeasurementInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("returns_auger_measurement_in_percentage");

                    b.Property<int>("RotorStrawWalkerSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("rotor_straw_walker_speed_in_rpm");

                    b.Property<double?>("SeparationLossesInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("separation_losses_in_percentage");

                    b.Property<double>("SeparationSensitivityInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("separation_sensitivity_in_percentage");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("serial_number");

                    b.Property<double?>("SieveLossesInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("sieve_losses_in_percentage");

                    b.Property<double>("SieveSensitivityInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("sieve_sensitivity_in_percentage");

                    b.Property<int>("SpecialCropWeightInGrams")
                        .HasColumnType("INT")
                        .HasColumnName("special_crop_weight_in_grams");

                    b.Property<double>("ThroughputTonsPerHour")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("throughput_tons_per_hour");

                    b.Property<double>("TotalWorkingHours")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("total_working_hours");

                    b.Property<CropType>("TypeOfCrop")
                        .HasColumnType("crop_type")
                        .HasColumnName("type_of_crop");

                    b.Property<short>("UpperSievePositionInMM")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("upper_sieve_position_in_mm");

                    b.Property<bool>("WorkingPosition")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("working_position");

                    b.Property<double?>("YieldInTonsPerHour")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("yield_in_tons_per_hour");

                    b.Property<bool>("YieldMeasurement")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("yield_measurement");

                    b.HasKey("Id");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("combine_telemetry", (string)null);
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("BinaryObject")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("binary_object");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("filename");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("md5_hash");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("BIGINT")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.ToTable("file_metadata", (string)null);
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.TractorTelemetry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("ActualStatusOfCreeper")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("actual_status_of_creeper");

                    b.Property<WheelDriveStatus>("AllWheelDriveStatus")
                        .HasColumnType("wheel_drive_status_type")
                        .HasColumnName("all_wheel_drive_status");

                    b.Property<double>("AmbientTemperatureInCelsius")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("ambient_temperature_in_celsius");

                    b.Property<int>("CoolantTemperatureInCelsius")
                        .HasColumnType("INT")
                        .HasColumnName("coolant_temperature_in_celsius");

                    b.Property<short?>("CurrentGearShift")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("current_gear_shift");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date");

                    b.Property<double>("EngineLoadInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("engine_load_in_percentage");

                    b.Property<int>("EngineSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("engine_speed_in_rpm");

                    b.Property<Guid>("FileMetadataId")
                        .HasColumnType("UUID")
                        .HasColumnName("file_metadata_id");

                    b.Property<double?>("FuelConsumptionPerHour")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("fuel_consumption_per_hour");

                    b.Property<double>("GPSLatitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_latitude");

                    b.Property<double>("GPSLongitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_longitude");

                    b.Property<double>("GroundSpeedGearboxInKmh")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("ground_speed_gearbox_in_kmh");

                    b.Property<int?>("GroundSpeedRadarInKmh")
                        .HasColumnType("INT")
                        .HasColumnName("ground_speed_radar_in_kmh");

                    b.Property<ParkingBreakStatus>("ParkingBreakStatus")
                        .HasColumnType("parking_break_status_type")
                        .HasColumnName("parking_break_status");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("serial_number");

                    b.Property<int>("SpeedFrontPtoInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("speed_front_pto_in_rpm");

                    b.Property<int>("SpeedRearPtoInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("speed_rear_pto_in_rpm");

                    b.Property<double>("TotalWorkingHours")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("total_working_hours");

                    b.Property<TransverseDifferentialLockStatus>("TransverseDifferentialLockStatus")
                        .HasColumnType("transverse_differential_lock_status_type")
                        .HasColumnName("transverse_differential_lock_status");

                    b.HasKey("Id");

                    b.HasIndex("FileMetadataId");

                    b.ToTable("tractor_telemetry", (string)null);
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.CombineTelemetry", b =>
                {
                    b.HasOne("LoginEKO.FileProcessingService.Domain.Models.FileMetadata", "FileMetadata")
                        .WithMany("CombineTelemetries")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.TractorTelemetry", b =>
                {
                    b.HasOne("LoginEKO.FileProcessingService.Domain.Models.FileMetadata", "FileMetadata")
                        .WithMany("TractorTelemetries")
                        .HasForeignKey("FileMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileMetadata");
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.FileMetadata", b =>
                {
                    b.Navigation("CombineTelemetries");

                    b.Navigation("TractorTelemetries");
                });
#pragma warning restore 612, 618
        }
    }
}
