// <auto-generated />
using System;
using LoginEKO.FileProcessingService.Domain.Models;
using LoginEKO.FileProcessingService.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoginEKO.FileProcessingService.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250912134442_CreeperStatusIsNullable")]
    partial class CreeperStatusIsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "parking_break_status_type", new[] { "status_3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transverse_differential_lock_status_type", new[] { "status_0" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "wheel_drive_status_type", new[] { "inactive", "active", "status_2" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.FileMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("BinaryObject")
                        .IsRequired()
                        .HasColumnType("BYTEA")
                        .HasColumnName("binary_object");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("created_date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("extension");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("filename");

                    b.Property<string>("MD5Hash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("md5_hash");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("BIGINT")
                        .HasColumnName("size_in_bytes");

                    b.HasKey("Id");

                    b.ToTable("file_metadata", (string)null);
                });

            modelBuilder.Entity("LoginEKO.FileProcessingService.Domain.Models.TractorTelemetry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("ActualStatusOfCreeper")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("actual_status_of_creeper");

                    b.Property<WheelDriveStatus>("AllWheelDriveStatus")
                        .HasColumnType("wheel_drive_status_type")
                        .HasColumnName("all_wheel_drive_status");

                    b.Property<double>("AmbientTemperatureInCelsius")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("ambient_temperature_in_celsius");

                    b.Property<int>("CoolantTemperatureInCelsius")
                        .HasColumnType("INT")
                        .HasColumnName("coolant_temperature_in_celsius");

                    b.Property<short?>("CurrentGearShift")
                        .HasColumnType("SMALLINT")
                        .HasColumnName("current_gear_shift");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("date");

                    b.Property<double>("EngineLoadInPercentage")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("engine_load_in_percentage");

                    b.Property<int>("EngineSpeedInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("engine_speed_in_rpm");

                    b.Property<double?>("FuelConsumptionPerHour")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("fuel_consumption_per_hour");

                    b.Property<double>("GPSLatitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_latitude");

                    b.Property<double>("GPSLongitude")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("gps_longitude");

                    b.Property<double>("GroundSpeedGearboxInKmh")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("ground_speed_gearbox_in_kmh");

                    b.Property<int?>("GroundSpeedRadarInKmh")
                        .HasColumnType("INT")
                        .HasColumnName("ground_speed_radar_in_kmh");

                    b.Property<ParkingBreakStatus>("ParkingBreakStatus")
                        .HasColumnType("parking_break_status_type")
                        .HasColumnName("parking_break_status");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("serial_number");

                    b.Property<int>("SpeedFrontPtoInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("speed_front_pto_in_rpm");

                    b.Property<int>("SpeedRearPtoInRpm")
                        .HasColumnType("INT")
                        .HasColumnName("speed_rear_pto_in_rpm");

                    b.Property<double>("TotalWorkingHours")
                        .HasColumnType("DOUBLE PRECISION")
                        .HasColumnName("total_working_hours");

                    b.Property<TransverseDifferentialLockStatus>("TransverseDifferentialLockStatus")
                        .HasColumnType("transverse_differential_lock_status_type")
                        .HasColumnName("transverse_differential_lock_status");

                    b.HasKey("Id");

                    b.ToTable("tractor_telemetry", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
